name: Weekly Auto Release

on:
  schedule:
    # 每周日 纽约时间 02:00 (夏令时对应 UTC 06:00，冬令时对应 UTC 07:00)
    - cron: '0 6 * * 0'
  workflow_dispatch:  # 允许手动触发

env:
  TIMEZONE: 'America/New_York'

jobs:
  create-release:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      discussions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0  # 获取完整的git历史

      - name: Setup timezone
        run: |
          sudo timedatectl set-timezone $TIMEZONE

      - name: Get current date
        id: date
        run: |
          echo "current_date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "week_number=$(date +'%Y-W%U')" >> $GITHUB_OUTPUT
          echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Generate version tag
        id: version
        run: |
          # 生成版本号格式: v年份.周数.修订号
          YEAR=$(date +'%Y')
          WEEK=$(date +'%U')
          
          # 检查本周是否已有release
          EXISTING_TAG=$(git tag -l "v${YEAR}.${WEEK}.*" | tail -1)
          
          if [ -z "$EXISTING_TAG" ]; then
            VERSION="v${YEAR}.${WEEK}.0"
          else
            PATCH=$(echo $EXISTING_TAG | cut -d'.' -f3)
            NEW_PATCH=$((PATCH + 1))
            VERSION="v${YEAR}.${WEEK}.${NEW_PATCH}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Check for changes since last release
        id: changes
        run: |
          # 获取最新的release tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "No previous releases found"
          else
            # 检查自上次release以来是否有新的提交
            CHANGES=$(git rev-list ${LATEST_TAG}..HEAD --count)
            if [ "$CHANGES" -gt "0" ]; then
              echo "has_changes=true" >> $GITHUB_OUTPUT
              echo "Found $CHANGES new commits since $LATEST_TAG"
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
              echo "No new commits since $LATEST_TAG"
            fi
          fi

      - name: Generate changelog
        id: changelog
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          # 获取最新的release tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          echo "## 📦 Weekly Release - ${{ steps.date.outputs.current_date }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### 🔄 Changes since last release:" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          if [ -z "$LATEST_TAG" ]; then
            echo "- Initial release" >> CHANGELOG.md
          else
            # 获取commit信息
            git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "### 📊 Statistics:" >> CHANGELOG.md
          echo "- **Release Date**: ${{ steps.date.outputs.current_date }}" >> CHANGELOG.md
          echo "- **Week Number**: ${{ steps.date.outputs.week_number }}" >> CHANGELOG.md
          
          if [ ! -z "$LATEST_TAG" ]; then
            COMMIT_COUNT=$(git rev-list ${LATEST_TAG}..HEAD --count)
            echo "- **Commits**: $COMMIT_COUNT" >> CHANGELOG.md
          
            CONTRIBUTORS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%an" | sort -u | wc -l)
            echo "- **Contributors**: $CONTRIBUTORS" >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "---" >> CHANGELOG.md
          echo "*This release was automatically generated by GitHub Actions.*" >> CHANGELOG.md
          
          # 输出changelog内容用于release
          {
            echo 'changelog<<EOF'
            cat CHANGELOG.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.changes.outputs.has_changes == 'true'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: "Weekly Release ${{ steps.version.outputs.version }} - ${{ steps.date.outputs.current_date }}"
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: No changes notification
        if: steps.changes.outputs.has_changes == 'false'
        run: |
          echo "ℹ️  No new changes found since last release. Skipping release creation."
          echo "If you want to force a release, use the 'workflow_dispatch' trigger."